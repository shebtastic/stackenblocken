/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package _hashcode;

import _hashcode.models.HorizontalPicture;
import _hashcode.models.Picture;
import _hashcode.models.Slide;
import _hashcode.models.VerticalPicture;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class App {
    public static void main(String[] args) {
        List<Picture> pictures = Reader.read("inputs/c_memorable_moments.txt");
        List<Slide> slides = makeSlides(pictures);
        Slideshow slideshow =  new Slideshow();
        slides.forEach(slideshow::addSlide);
        System.out.println("slides size: " + slides.size());
        System.out.println("slideshow interestScore: " + slideshow.interestScore());
        slideshow.bringInOrder();
        System.out.println("slideshow.sort interestScore: " + slideshow.interestScore());

        generateOutputs();
    }

    private static void generateOutputs() {
        List<String> inputs = Arrays.asList("a_example.txt", "b_lovely_landscapes.txt", "c_memorable_moments.txt", "d_pet_pictures.txt", "e_shiny_selfies.txt");
        inputs.forEach(input -> {
            List<Picture> pictures = Reader.read("inputs/" + input);
            List<Slide> slides = makeSlides(pictures);
            Slideshow slideshow =  new Slideshow();
            slides.forEach(slideshow::addSlide);
            Writer.write(slides, input);
        });
    }

    private static ArrayList<Slide> makeSlides(List<Picture> pictures) {
        List<HorizontalPicture> horizontalPictures = new ArrayList<>();
        List<VerticalPicture> verticalPictures = new ArrayList<>();
        pictures.forEach(picture -> {
            if (picture.ORIENTATION.equals(HorizontalPicture.ORIENTATION)) {
                horizontalPictures.add((HorizontalPicture)picture);
            } else {
                verticalPictures.add((VerticalPicture)picture);
            }
        });

        ArrayList<Slide> slides = new ArrayList<>();
        horizontalPictures.forEach(picture -> slides.add(new Slide(picture)));
        slides.addAll(findVerticalSlides(verticalPictures));
        return slides;
    }

    private static List<Slide> findVerticalSlides(List<VerticalPicture> verticalPictures) {
        List<Slide> slides = new ArrayList<>();
        List<List<VerticalPicture>> permutations = permute(verticalPictures.toArray(new VerticalPicture[0]));
        permutations.sort((first, second) -> {
            int firstSum = 0, secondSum = 0;
            for (int i = 0; i < first.size() - 1; i++) {
                firstSum += first.get(i).tagOverlap(first.get(i + 1));
                secondSum += second.get(i).tagOverlap(second.get(i + 1));
            }
            return Integer.compare(firstSum, secondSum);
        });

        verticalPictures = permutations.get(permutations.size() -1);
        for (int i=0; i<verticalPictures.size(); i+=2) {
            slides.add(new Slide(verticalPictures.get(i), verticalPictures.get(i+1)));
        }
//        slides.forEach(slide -> {
//            System.out.println(slide.tags().size() + " " + slide.PICTURES.get(0) + " " + slide.PICTURES.get(1));
//        });
        return slides;
    }

    public static List<List<VerticalPicture>> permute(VerticalPicture[] verticalPictures) {
        List<List<VerticalPicture>> result = new ArrayList<>();
        permute(0, verticalPictures, result);
        return result;
    }

    private static void permute(int start, VerticalPicture[] verticalPictures, List<List<VerticalPicture>> result){
        if(start == verticalPictures.length - 1){
            result.add(new ArrayList<>(Arrays.asList(verticalPictures)));
            return;
        }
        for(int i = start; i < verticalPictures.length; i++){
            swapInplace(verticalPictures, i, start);
            permute(start + 1, verticalPictures, result);
            swapInplace(verticalPictures, i, start);
        }
    }

    private static void swapInplace(VerticalPicture[] verticalPictures, int i, int j){
        VerticalPicture temp = verticalPictures[i];
        verticalPictures[i] = verticalPictures[j];
        verticalPictures[j] = temp;
    }
}
