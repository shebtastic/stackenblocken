/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package _hashcode;

import _hashcode.models.HorizontalPicture;
import _hashcode.models.Picture;
import _hashcode.models.Slide;
import _hashcode.models.VerticalPicture;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class App {
    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    public static final List<String> INPUTS = Arrays.asList("a_example.txt", "b_lovely_landscapes.txt", "c_memorable_moments.txt", "d_pet_pictures.txt", "e_shiny_selfies.txt");


    public static void main(String[] args) {
        List<Picture> pictures = Reader.read("c_memorable_moments.txt");
        List<Slide> slides = makeSlides(pictures);
        Slideshow slideshow =  new Slideshow();
        slides.forEach(slideshow::addSlide);
        LOGGER.info("slides size: " + slides.size());
        LOGGER.info("slideshow interestScore: " + slideshow.interestScore());
        slideshow.bringInOrder();
        LOGGER.info("ordered interestScore: " + slideshow.interestScore());
        for(Slide slide: slideshow.getSlides()) {
            LOGGER.debug(slide.toString());
        }

//        generateOutputs();
    }

    private static void generateOutputs() {
        LOGGER.info("");
        LOGGER.info("generating Slideshows for all inputs:");
        INPUTS.forEach(input -> {
            List<Picture> pictures = Reader.read(input);
            List<Slide> slides = makeSlides(pictures);
            Slideshow slideshow =  new Slideshow();
            slides.forEach(slideshow::addSlide);
            LOGGER.info(input + " interest Score before: " + slideshow.interestScore());
            slideshow.bringInOrder();
            Writer.write(slideshow.getSlides(), input);
            LOGGER.info(input + " interest Score after:  " + slideshow.interestScore());
        });
    }

    private static ArrayList<Slide> makeSlides(List<Picture> pictures) {
        List<HorizontalPicture> horizontalPictures = new ArrayList<>();
        List<VerticalPicture> verticalPictures = new ArrayList<>();
        pictures.forEach(picture -> {
            if (picture.ORIENTATION.equals(HorizontalPicture.ORIENTATION)) {
                horizontalPictures.add((HorizontalPicture)picture);
            } else {
                verticalPictures.add((VerticalPicture)picture);
            }
        });

        ArrayList<Slide> slides = new ArrayList<>();
        horizontalPictures.forEach(picture -> slides.add(new Slide(picture)));
        slides.addAll(findVerticalSlides(verticalPictures));
        return slides;
    }

    private static List<Slide> findVerticalSlides(List<VerticalPicture> verticalPictures) {
        List<Slide> slides = new ArrayList<>();
        verticalPictures.sort(Comparator.comparingInt(verticalPicture -> verticalPicture.TAGS.size()));
        for (int i=0; i<verticalPictures.size() / 2; i+=2) {
            slides.add(new Slide(
                verticalPictures.get(i),
                verticalPictures.get((verticalPictures.size() - (i + 1)))
                )
            );
        }
//        slides.forEach(slide -> {
//            System.out.println(slide.TAGS.size() + " " + slide.PICTURES.get(0) + " " + slide.PICTURES.get(1));
//        });
        return slides;
    }

}
